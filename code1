# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
train = pd.read_csv("Train.csv")
test = pd.read_csv("Test.csv")

# Combine train and test for preprocessing
test['Item_Outlet_Sales'] = np.nan
data = pd.concat([train, test], ignore_index=True)

# Data Cleaning

# Fill missing Item_Weight with mean
data['Item_Weight'].fillna(data['Item_Weight'].mean(), inplace=True)

# Fill missing Outlet_Size with mode
data['Outlet_Size'].fillna(data['Outlet_Size'].mode()[0], inplace=True)

# Fix inconsistent Item_Fat_Content values
data['Item_Fat_Content'] = data['Item_Fat_Content'].replace({
    'LF': 'Low Fat',
    'low fat': 'Low Fat',
    'reg': 'Regular'
})

# Feature Engineering

# Create new feature: Years of operation
data['Outlet_Years'] = 2025 - data['Outlet_Establishment_Year']

# Combine item categories
data['Item_Type_Combined'] = data['Item_Identifier'].apply(lambda x: x[:2])
data['Item_Type_Combined'] = data['Item_Type_Combined'].map({'FD': 'Food', 'NC': 'Non-Consumable', 'DR': 'Drinks'})

# For non-consumables, fat content should be 'Non-Edible'
data.loc[data['Item_Type_Combined'] == 'Non-Consumable', 'Item_Fat_Content'] = 'Non-Edible'

# Label encoding for categorical variables
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
cols = ['Item_Fat_Content', 'Outlet_Location_Type', 'Outlet_Size', 'Outlet_Type', 'Item_Type_Combined', 'Outlet_Identifier']
for col in cols:
    data[col] = le.fit_transform(data[col])

# Separate the datasets
train = data[~data['Item_Outlet_Sales'].isna()]
test = data[data['Item_Outlet_Sales'].isna()]
test.drop(['Item_Outlet_Sales'], axis=1, inplace=True)

# Define features and target
X = train.drop(['Item_Outlet_Sales', 'Item_Identifier'], axis=1)
y = train['Item_Outlet_Sales']
X_test = test.drop(['Item_Identifier'], axis=1)

# Train a model
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

model = LinearRegression()
model.fit(X, y)
preds = model.predict(X)

# Evaluate the model
rmse = np.sqrt(mean_squared_error(y, preds))
print("Training RMSE:", rmse)

# Predict on test set
test_preds = model.predict(X_test)

# Create submission file
submission = pd.DataFrame({
    "Item_Identifier": test["Item_Identifier"],
    "Outlet_Identifier": test["Outlet_Identifier"],
    "Item_Outlet_Sales": test_preds
})

submission.to_csv("submission.csv", index=False)
print("Submission file saved as submission.csv")
